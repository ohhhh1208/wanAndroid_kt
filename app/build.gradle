plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'com.google.devtools.ksp'

//    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

//加入kapt插件，否则会报错
//apply plugin: 'kotlin-kapt'
//apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'

android {
    namespace 'com.ouo.wan_android_kt'
    compileSdk 34

    defaultConfig {
        applicationId "com.ouo.wan_android_kt"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //bugly配置
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    //添加开启viewBinding和dataBinding
    buildFeatures {
        viewBinding = true
        dataBinding = true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.annotation:annotation:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //引入模块
    implementation project(":model")
    implementation project(":core")
    implementation project(":network")

    //引入Hilt框架(依赖注入框架)
//    implementation 'com.google.dagger:hilt-android:2.48.1'
//    kapt 'com.google.dagger:hilt-compiler:2.48.1'
    implementation 'com.google.dagger:hilt-android:2.46'
    kapt 'com.google.dagger:hilt-compiler:2.46'
//    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    //Bugly异常上报/热更新
    implementation 'com.tencent.bugly:crashreport:4.1.9'

    // Kotlin 标准库
//    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.0'
//    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.10'



    /*
        引入模块依赖不成功，所以在以下重复引用一下模块中已有的依赖
    */
    //协程 协程是一种并发设计模式，可以在 Android 平台上使用它来简化异步执行的代码
/*    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0'
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.0'

    //下拉刷新，上推加载
    implementation 'io.github.scwang90:refresh-layout-kernel:2.1.0'      //核心必须依赖
    implementation 'io.github.scwang90:refresh-header-classics:2.1.0'    //经典刷新头
//    implementation  'io.github.scwang90:refresh-header-material:2.1.0'    //谷歌刷新头
    implementation 'io.github.scwang90:refresh-footer-classics:2.1.0'    //经典加载

    //recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.3.1'*/
}